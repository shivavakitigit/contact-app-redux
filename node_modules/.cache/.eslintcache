[{"/Users/shiva/Desktop/React/git/contact-app-redux/src/index.js":"1","/Users/shiva/Desktop/React/git/contact-app-redux/src/App.js":"2","/Users/shiva/Desktop/React/git/contact-app-redux/src/redux/store.js":"3","/Users/shiva/Desktop/React/git/contact-app-redux/src/components/Contacts.js":"4","/Users/shiva/Desktop/React/git/contact-app-redux/src/components/Header.js":"5","/Users/shiva/Desktop/React/git/contact-app-redux/src/redux/reducers/contacts.js":"6","/Users/shiva/Desktop/React/git/contact-app-redux/src/components/AddEditContact.js":"7","/Users/shiva/Desktop/React/git/contact-app-redux/src/redux/actions/contacts-action.js":"8","/Users/shiva/Desktop/React/git/contact-app-redux/src/components/Practice.js":"9","/Users/shiva/Desktop/React/git/contact-app-redux/src/components/Login.js":"10","/Users/shiva/Desktop/React/git/contact-app-redux/src/redux/reducers/LoginReducer.js":"11"},{"size":693,"mtime":1658508228162,"results":"12","hashOfConfig":"13"},{"size":389,"mtime":1659021754994,"results":"14","hashOfConfig":"13"},{"size":606,"mtime":1659023884849,"results":"15","hashOfConfig":"13"},{"size":3568,"mtime":1658896921401,"results":"16","hashOfConfig":"13"},{"size":1824,"mtime":1619913675000,"results":"17","hashOfConfig":"13"},{"size":1685,"mtime":1659023568215,"results":"18","hashOfConfig":"13"},{"size":3358,"mtime":1658931042873,"results":"19","hashOfConfig":"13"},{"size":552,"mtime":1619913675000,"results":"20","hashOfConfig":"13"},{"size":166,"mtime":1658889800065,"results":"21","hashOfConfig":"13"},{"size":1634,"mtime":1659026402397,"results":"22","hashOfConfig":"13"},{"size":525,"mtime":1659026152569,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"oj5431",{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/shiva/Desktop/React/git/contact-app-redux/src/index.js",[],["51","52"],"/Users/shiva/Desktop/React/git/contact-app-redux/src/App.js",["53","54"],"import \"./App.css\";\nimport Contacts from \"./components/Contacts\";\nimport Header from \"./components/Header\";\nimport Login from \"./components/Login\";\nimport Practice from \"./components/Practice\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <Practice></Practice> */}\n      <Header />\n      <Login></Login>\n      {/* <Contacts /> */}\n    </div>\n  );\n}\n\nexport default App;\n","/Users/shiva/Desktop/React/git/contact-app-redux/src/redux/store.js",["55"],"import {compose, createStore} from 'redux';\nimport {contactsReducer} from './reducers/contacts';\nimport { LoginReducer } from './reducers/LoginReducer';\n\n\n// export const store = createStore(contactsReducer);\nconst enhancers = compose(\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    );\n// multipleCombineReducers is a function that takes an object of reducers and returns a single reducer\nexport const store = createStore(\n    // contactsReducer,\n    LoginReducer,\n    enhancers\n  );\n\n\n  // hooks\n  // redux\n\n\n//   chrome extension\n// rect dev tools\n// redux dev tools","/Users/shiva/Desktop/React/git/contact-app-redux/src/components/Contacts.js",["56","57","58"],"import React, { useEffect } from \"react\";\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport {\n  getAllContacts,\n  getSingleContact,\n  deleteContact,\n} from \"../redux/actions/contacts-action\";\nimport AddEditContact from \"./AddEditContact\";\n\nfunction Contacts({\n  getAllContacts,\n  contacts,\n  getSingleContact,\n  contact,\n  deleteContact,\n}) {\nconst globalState = useSelector(globalState => globalState);\nconst dispatch = useDispatch();\n\n  useEffect(() => {\n    getAllContactsData();  // api call  to get all contacts\n  });\n\n  const getAllContactsData = () => {\n    getAllContacts();\n  };\n  const handleDelete = (index) => {\n    const confirm = window.confirm(\"Are you sure want to delete?\");\n    if (confirm) {\n      deleteContact(index);\n    }\n  };\n  return (\n    <React.Fragment>\n      <div className=\"container d-flex flex-row justify-content-between mt-4\">\n        <h1>All Contacts</h1>\n        <button\n          className=\"btn btn-primary\"\n          data-toggle=\"modal\"\n          data-target=\"#exampleModalCenter\"\n        >\n          +Add Contact\n        </button>\n      </div>\n      <div className=\"container mt-4\">\n        {contacts.length === 0 && (\n          <p className=\"text-danger text-center\">No Contacts Found!</p>\n        )}\n        {contacts.length > 0 && (\n          <table className=\"table table-hover\">\n            <thead>\n              <tr>\n                <th scope=\"col\">S.No</th>\n                <th scope=\"col\">Name</th>\n                <th scope=\"col\">Phone Number</th>\n                <th scope=\"col\">Email</th>\n                <th scope=\"col\">Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {contacts.map((contact, index) => (\n                <tr key={index}>\n                  <th>{index + 1}</th>\n                  <td>{contact.name}</td>\n                  <td>{contact.phoneNumber}</td>\n                  <td>{contact.email}</td>\n                  <td>\n                    <button\n                      className=\"btn btn-primary\"\n                      data-toggle=\"modal\"\n                      data-target=\"#exampleModalCenter\"\n                      onClick={() => getSingleContact(index)}\n                    >\n                      Edit\n                    </button>{\" \"}\n                    &nbsp;\n                    <button\n                      className=\"btn btn-danger\"\n                      onClick={() => handleDelete(index)}\n                    >\n                      Delete\n                    </button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )}\n\n        <div\n          className=\"modal fade\"\n          id=\"exampleModalCenter\"\n          tabIndex=\"-1\"\n          role=\"dialog\"\n          aria-labelledby=\"exampleModalCenterTitle\"\n          aria-hidden=\"true\"\n        >\n          <div className=\"modal-dialog modal-dialog-centered\" role=\"document\">\n            <AddEditContact editContactData={contact} />\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n}\nconst mapStateToProps = (globalState) => {\n  return {\n    contacts: globalState.contacts,\n    contact: globalState.contact,\n  };\n};\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    getAllContacts: () => dispatch({type:'GET_ALL_CONTACTS'}),\n    getSingleContact: (index) => dispatch(getSingleContact(index)),\n    deleteContact: (index) => dispatch(deleteContact(index)),\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Contacts);\n\n\n//arrays\n// index 0\n// index 1\n// index 2\n// index 3","/Users/shiva/Desktop/React/git/contact-app-redux/src/components/Header.js",["59"],"import React, {useState, useEffect} from 'react';\nimport {connect} from 'react-redux';\nimport {filterContacts} from '../redux/actions/contacts-action';\nfunction Header({filterContacts}) {\n  const [ searchInput, setSearchInput ] = useState('');\n  useEffect(\n    () => {\n      filterContacts(searchInput);\n    },\n    [ searchInput ],\n  );\n  return (\n    <div>\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n        <a className=\"navbar-brand\" href=\"/#\">\n          Contacts\n        </a>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarSupportedContent\"\n          aria-controls=\"navbarSupportedContent\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\" />\n        </button>\n\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav mr-auto\" />\n          <form className=\"form-inline my-2 my-lg-0\">\n            <input\n              className=\"form-control mr-sm-2\"\n              type=\"search\"\n              placeholder=\"Search\"\n              aria-label=\"Search\"\n              value={searchInput}\n              onChange={(e) => setSearchInput(e.target.value)}\n            />\n            <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">\n              Search\n            </button>\n          </form>\n        </div>\n      </nav>\n    </div>\n  );\n}\nconst mapStateToProps = (state) => {\n  return {\n    contacts: state.contacts,\n    contact: state.contact,\n  };\n};\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    filterContacts: (searchInput) => dispatch(filterContacts(searchInput)),\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n","/Users/shiva/Desktop/React/git/contact-app-redux/src/redux/reducers/contacts.js",[],"/Users/shiva/Desktop/React/git/contact-app-redux/src/components/AddEditContact.js",[],"/Users/shiva/Desktop/React/git/contact-app-redux/src/redux/actions/contacts-action.js",[],"/Users/shiva/Desktop/React/git/contact-app-redux/src/components/Practice.js",[],"/Users/shiva/Desktop/React/git/contact-app-redux/src/components/Login.js",["60"],"/Users/shiva/Desktop/React/git/contact-app-redux/src/redux/reducers/LoginReducer.js",[],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":2,"column":8,"nodeType":"67","messageId":"68","endLine":2,"endColumn":16},{"ruleId":"65","severity":1,"message":"69","line":5,"column":8,"nodeType":"67","messageId":"68","endLine":5,"endColumn":16},{"ruleId":"65","severity":1,"message":"70","line":2,"column":9,"nodeType":"67","messageId":"68","endLine":2,"endColumn":24},{"ruleId":"65","severity":1,"message":"71","line":4,"column":3,"nodeType":"67","messageId":"68","endLine":4,"endColumn":17},{"ruleId":"65","severity":1,"message":"72","line":17,"column":7,"nodeType":"67","messageId":"68","endLine":17,"endColumn":18},{"ruleId":"65","severity":1,"message":"73","line":18,"column":7,"nodeType":"67","messageId":"68","endLine":18,"endColumn":15},{"ruleId":"74","severity":1,"message":"75","line":10,"column":5,"nodeType":"76","endLine":10,"endColumn":20,"suggestions":"77"},{"ruleId":"74","severity":1,"message":"78","line":39,"column":4,"nodeType":"76","endLine":39,"endColumn":6,"suggestions":"79"},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"no-unused-vars","'Contacts' is defined but never used.","Identifier","unusedVar","'Practice' is defined but never used.","'contactsReducer' is defined but never used.","'getAllContacts' is defined but never used.","'globalState' is assigned a value but never used.","'dispatch' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'filterContacts'. Either include it or remove the dependency array. If 'filterContacts' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["82"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["83"],"no-global-assign","no-unsafe-negation",{"desc":"84","fix":"85"},{"desc":"86","fix":"87"},"Update the dependencies array to be: [filterContacts, searchInput]",{"range":"88","text":"89"},"Update the dependencies array to be: [dispatch]",{"range":"90","text":"91"},[315,330],"[filterContacts, searchInput]",[929,931],"[dispatch]"]